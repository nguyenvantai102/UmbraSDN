# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import umbra_pb2 as umbra__pb2


class BrokerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Manage = channel.unary_unary(
                '/umbra.Broker/Manage',
                request_serializer=umbra__pb2.Config.SerializeToString,
                response_deserializer=umbra__pb2.Report.FromString,
                )


class BrokerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Manage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Manage': grpc.unary_unary_rpc_method_handler(
                    servicer.Manage,
                    request_deserializer=umbra__pb2.Config.FromString,
                    response_serializer=umbra__pb2.Report.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'umbra.Broker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Broker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Manage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umbra.Broker/Manage',
            umbra__pb2.Config.SerializeToString,
            umbra__pb2.Report.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class ScenarioStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Establish = channel.unary_unary(
                '/umbra.Scenario/Establish',
                request_serializer=umbra__pb2.Workflow.SerializeToString,
                response_deserializer=umbra__pb2.Status.FromString,
                )


class ScenarioServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Establish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScenarioServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Establish': grpc.unary_unary_rpc_method_handler(
                    servicer.Establish,
                    request_deserializer=umbra__pb2.Workflow.FromString,
                    response_serializer=umbra__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'umbra.Scenario', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Scenario(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Establish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umbra.Scenario/Establish',
            umbra__pb2.Workflow.SerializeToString,
            umbra__pb2.Status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class MonitorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Listen = channel.unary_unary(
                '/umbra.Monitor/Listen',
                request_serializer=umbra__pb2.Instruction.SerializeToString,
                response_deserializer=umbra__pb2.Evaluation.FromString,
                )


class MonitorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Listen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Listen': grpc.unary_unary_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=umbra__pb2.Instruction.FromString,
                    response_serializer=umbra__pb2.Evaluation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'umbra.Monitor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Monitor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Listen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umbra.Monitor/Listen',
            umbra__pb2.Instruction.SerializeToString,
            umbra__pb2.Evaluation.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class AgentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Probe = channel.unary_unary(
                '/umbra.Agent/Probe',
                request_serializer=umbra__pb2.Instruction.SerializeToString,
                response_deserializer=umbra__pb2.Evaluation.FromString,
                )


class AgentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Probe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Probe': grpc.unary_unary_rpc_method_handler(
                    servicer.Probe,
                    request_deserializer=umbra__pb2.Instruction.FromString,
                    response_serializer=umbra__pb2.Evaluation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'umbra.Agent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Agent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Probe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umbra.Agent/Probe',
            umbra__pb2.Instruction.SerializeToString,
            umbra__pb2.Evaluation.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
